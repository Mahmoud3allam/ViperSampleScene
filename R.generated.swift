//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `WorkSans-Bold`.
    static let workSansBold = Rswift.FontResource(fontName: "WorkSans-Bold")
    /// Font `WorkSans-Regular`.
    static let workSansRegular = Rswift.FontResource(fontName: "WorkSans-Regular")
    /// Font `WorkSans-SemiBold`.
    static let workSansSemiBold = Rswift.FontResource(fontName: "WorkSans-SemiBold")
    
    /// `UIFont(name: "WorkSans-Bold", size: ...)`
    static func workSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: workSansBold, size: size)
    }
    
    /// `UIFont(name: "WorkSans-Regular", size: ...)`
    static func workSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: workSansRegular, size: size)
    }
    
    /// `UIFont(name: "WorkSans-SemiBold", size: ...)`
    static func workSansSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: workSansSemiBold, size: size)
    }
    
    static func validate() throws {
      if R.font.workSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'WorkSans-Bold' could not be loaded, is 'WorkSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.workSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'WorkSans-Regular' could not be loaded, is 'WorkSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.workSansSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'WorkSans-SemiBold' could not be loaded, is 'WorkSans-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `ALLaaam`.
    static let alLaaam = Rswift.ImageResource(bundle: R.hostingBundle, name: "ALLaaam")
    /// Image `Screen Shot 2019-07-08 at 7.12.37 PM`.
    static let screenShot20190708At71237PM = Rswift.ImageResource(bundle: R.hostingBundle, name: "Screen Shot 2019-07-08 at 7.12.37 PM")
    
    /// `UIImage(named: "ALLaaam", bundle: ..., traitCollection: ...)`
    static func alLaaam(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alLaaam, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Screen Shot 2019-07-08 at 7.12.37 PM", bundle: ..., traitCollection: ...)`
    static func screenShot20190708At71237PM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot20190708At71237PM, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
